<% title = 'Manage Rooms' %>

<div class="p-6">
  <div class="flex justify-between items-center mb-4">
    <h1 class="text-2xl font-bold">Manage Rooms</h1>
    <button id="newRoomBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded">
      + New Room
    </button>
  </div>

  <table class="min-w-full bg-white rounded shadow overflow-hidden">
    <thead class="bg-gray-100">
      <tr>
        <th class="px-4 py-2 text-left">Number</th>
        <th class="px-4 py-2 text-left">Type</th>
        <th class="px-4 py-2 text-left">Price</th>
        <th class="px-4 py-2 text-left">Status</th>
        <th class="px-4 py-2 text-left">Hotel</th>
        <th class="px-4 py-2 text-left">Actions</th>
      </tr>
    </thead>
    <tbody id="roomsTable">
      <!-- rows injected by JS -->
    </tbody>
  </table>
</div>

<!-- Room Modal -->
<div
  id="roomModal"
  class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50"
>
  <div class="bg-white p-6 rounded shadow w-96 relative">
    <h2 class="text-xl font-semibold mb-4" id="modalTitle">New Room</h2>
    <div id="formError" class="text-red-600 mb-2 hidden"></div>
    <form id="roomForm" class="space-y-4">
      <div>
        <label class="block font-medium">Hotel</label>
        <select id="hotelSelect" class="w-full border px-2 py-1 rounded" required></select>
      </div>
      <div>
        <label class="block font-medium">Room Number</label>
        <input
          type="text"
          id="roomNumber"
          class="w-full border px-2 py-1 rounded"
          required
        />
      </div>
      <div>
        <label class="block font-medium">Type</label>
        <input
          type="text"
          id="roomType"
          class="w-full border px-2 py-1 rounded"
          placeholder="e.g. Deluxe"
          required
        />
      </div>
      <div>
        <label class="block font-medium">Price</label>
        <input
          type="number"
          step="0.01"
          id="roomPrice"
          class="w-full border px-2 py-1 rounded"
          required
        />
      </div>
      <div>
        <label class="block font-medium">Status</label>
        <select id="roomStatus" class="w-full border px-2 py-1 rounded">
          <option value="available">Available</option>
          <option value="booked">Booked</option>
        </select>
      </div>
      <div class="flex justify-end space-x-2">
        <button
          type="button"
          id="closeModal"
          class="px-4 py-2 rounded border"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
        >
          Save
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const roomsTable = document.getElementById('roomsTable');
    const newRoomBtn  = document.getElementById('newRoomBtn');
    const roomModal   = document.getElementById('roomModal');
    const closeModal  = document.getElementById('closeModal');
    const roomForm    = document.getElementById('roomForm');
    const modalTitle  = document.getElementById('modalTitle');
    const formError   = document.getElementById('formError');

    const hotelSelect = document.getElementById('hotelSelect');
    const roomNumber  = document.getElementById('roomNumber');
    const roomType    = document.getElementById('roomType');
    const roomPrice   = document.getElementById('roomPrice');
    const roomStatus  = document.getElementById('roomStatus');

    let isEditing = false;
    let editingId = null;

    // Load hotels into the select
    async function fetchHotels() {
      const res = await fetch('/api/hotels');
      const data = await res.json();
      hotelSelect.innerHTML = '<option value="">— Select Hotel —</option>' +
        data.map(h => `<option value="${h.id}">${h.name}</option>`).join('');
    }

    // Populate rooms table
    async function loadRooms() {
      const res = await fetch('/api/rooms');
      const data = await res.json();
      roomsTable.innerHTML = data.map(r => `
        <tr>
          <td class="border px-4 py-2">${r.number}</td>
          <td class="border px-4 py-2">${r.type}</td>
          <td class="border px-4 py-2">${r.price}</td>
          <td class="border px-4 py-2 capitalize">${r.status}</td>
          <td class="border px-4 py-2">${r.HotelId || ''}</td>
          <td class="border px-4 py-2 space-x-2">
            <button data-id="${r.id}" class="editBtn text-blue-600">Edit</button>
            <button data-id="${r.id}" class="deleteBtn text-red-600">Delete</button>
          </td>
        </tr>
      `).join('');

      document.querySelectorAll('.editBtn').forEach(btn => {
        btn.addEventListener('click', async e => {
          const id = e.target.dataset.id;
          const res = await fetch(`/api/rooms/${id}`);
          const r   = await res.json();
          isEditing = true;
          editingId = id;
          modalTitle.textContent = 'Edit Room';
          formError.classList.add('hidden');

          hotelSelect.value  = r.HotelId;
          roomNumber.value   = r.number;
          roomType.value     = r.type;
          roomPrice.value    = r.price;
          roomStatus.value   = r.status;
          roomModal.classList.remove('hidden');
        });
      });

      document.querySelectorAll('.deleteBtn').forEach(btn => {
        btn.addEventListener('click', async e => {
          if (confirm('Delete this room?')) {
            await fetch(`/api/rooms/${e.target.dataset.id}`, { method: 'DELETE' });
            loadRooms();
          }
        });
      });
    }

    newRoomBtn.addEventListener('click', () => {
      isEditing = false;
      editingId = null;
      modalTitle.textContent = 'New Room';
      formError.classList.add('hidden');
      roomForm.reset();
      roomModal.classList.remove('hidden');
    });

    closeModal.addEventListener('click', () => {
      roomModal.classList.add('hidden');
    });

    roomForm.addEventListener('submit', async e => {
      e.preventDefault();
      formError.classList.add('hidden');

      const payload = {
        hotel:   hotelSelect.value,
        number:  roomNumber.value,
        type:    roomType.value,
        price:   roomPrice.value,
        status:  roomStatus.value,
      };

      try {
        if (isEditing) {
          await fetch(`/api/rooms/${editingId}`, {
            method: 'PUT',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify(payload)
          });
        } else {
          await fetch('/api/rooms', {
            method: 'POST',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify(payload)
          });
        }
        roomModal.classList.add('hidden');
        loadRooms();
      } catch (err) {
        formError.textContent = err.message || 'Error saving room';
        formError.classList.remove('hidden');
      }
    });

    // Kick things off
    fetchHotels();
    loadRooms();
  });
</script>
