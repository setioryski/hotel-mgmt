<% title = 'Manage Rooms' %>

<a href="/admin/hotels" class="text-sm text-gray-600 hover:underline mb-4 inline-block">
  ← Back to Hotels
</a>

<h1 class="text-2xl font-bold mb-4">Rooms for Hotel #<%= hotelId %></h1>

<button
  id="newRoomBtn"
  class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded mb-4"
>
  + New Room
</button>

<table class="min-w-full bg-white rounded shadow overflow-hidden mb-8">
  <thead class="bg-gray-100">
    <tr>
      <th class="px-4 py-2">Number</th>
      <th class="px-4 py-2">Type</th>
      <th class="px-4 py-2">Price</th>
      <th class="px-4 py-2">Status</th>
      <th class="px-4 py-2 text-center">Visible</th>
      <th class="px-4 py-2">Actions</th>
    </tr>
  </thead>
  <tbody id="roomsTable"></tbody>
</table>

<!-- Room Modal -->
<div
  id="roomModal"
  class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50"
>
  <div class="bg-white p-6 rounded shadow w-96">
    <h2 class="text-xl font-semibold mb-4" id="modalTitle">New Room</h2>
    <div id="formError" class="text-red-600 mb-2 hidden"></div>
    <form id="roomForm" class="space-y-4">
      <div>
        <label class="block font-medium">Room Number</label>
        <input type="text" id="roomNumber" class="w-full border px-2 py-1 rounded" required />
      </div>
      <div>
        <label class="block font-medium">Type</label>
        <input type="text" id="roomType" class="w-full border px-2 py-1 rounded" required />
      </div>
      <div>
        <label class="block font-medium">Price</label>
        <input type="number" step="0.01" id="roomPrice" class="w-full border px-2 py-1 rounded" required />
      </div>
      <div>
        <label class="block font-medium">Status</label>
        <select id="roomStatus" class="w-full border px-2 py-1 rounded">
          <option value="available">Available</option>
          <option value="booked">Booked</option>
        </select>
      </div>
      <div class="flex justify-end space-x-2">
        <button type="button" id="closeModal" class="px-4 py-2 rounded border">Cancel</button>
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">Save</button>
      </div>
    </form>
  </div>
</div>

<!-- SortableJS for drag-and-drop -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const hotelId    = '<%= hotelId %>';
    const roomsTable = document.getElementById('roomsTable');
    const newRoomBtn = document.getElementById('newRoomBtn');
    const roomModal  = document.getElementById('roomModal');
    const closeModal = document.getElementById('closeModal');
    const roomForm   = document.getElementById('roomForm');
    const modalTitle = document.getElementById('modalTitle');
    const formError  = document.getElementById('formError');
    const roomNumber = document.getElementById('roomNumber');
    const roomType   = document.getElementById('roomType');
    const roomPrice  = document.getElementById('roomPrice');
    const roomStatus = document.getElementById('roomStatus');

    let isEditing = false;
    let editingId = null;

    // Load rooms and render rows with drag handles + visibility toggle
    async function loadRooms() {
      try {
        const res  = await fetch(`/api/rooms?hotel=${hotelId}`, { credentials: 'include' });
        const data = await res.json();

        roomsTable.innerHTML = data.map(r => `
          <tr data-id="${r.id}" class="cursor-move">
            <td class="border px-4 py-2">
              <span class="drag-handle mr-2">☰</span>${r.number}
            </td>
            <td class="border px-4 py-2">${r.type}</td>
            <td class="border px-4 py-2">${r.price}</td>
            <td class="border px-4 py-2 capitalize">${r.status}</td>
            <td class="border px-4 py-2 text-center">
              <input
                type="checkbox"
                class="toggleVisible"
                data-id="${r.id}"
                ${r.visible ? 'checked' : ''}
              >
            </td>
            <td class="border px-4 py-2 space-x-2">
              <button data-id="${r.id}" class="editBtn text-blue-600">Edit</button>
              <button data-id="${r.id}" class="deleteBtn text-red-600">Delete</button>
            </td>
          </tr>
        `).join('');

        // Attach edit/delete listeners
        document.querySelectorAll('.editBtn').forEach(btn =>
          btn.addEventListener('click', onEdit)
        );
        document.querySelectorAll('.deleteBtn').forEach(btn =>
          btn.addEventListener('click', onDelete)
        );

        // Attach visibility-toggle listeners
        document.querySelectorAll('.toggleVisible').forEach(cb =>
          cb.addEventListener('change', async (e) => {
            const id = e.target.dataset.id;
            const visible = e.target.checked;
            try {
              await fetch(`/api/rooms/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({ visible })
              });
            } catch (err) {
              alert('Failed to update visibility: ' + err.message);
            }
          })
        );
      } catch (err) {
        roomsTable.innerHTML = `
          <tr><td colspan="6" class="text-red-600 p-4">
            Failed to load rooms: ${err.message}
          </td></tr>
        `;
      }
    }

    // Edit handler
    async function onEdit(e) {
      const id = e.target.dataset.id;
      try {
        const res = await fetch(`/api/rooms/${id}`, { credentials: 'include' });
        const r   = await res.json();
        isEditing = true;
        editingId = id;
        modalTitle.textContent = 'Edit Room';
        formError.classList.add('hidden');
        roomNumber.value = r.number;
        roomType.value   = r.type;
        roomPrice.value  = r.price;
        roomStatus.value = r.status;
        roomModal.classList.remove('hidden');
      } catch (err) {
        alert('Failed to load room: ' + err.message);
      }
    }

    // Delete handler
    async function onDelete(e) {
      if (!confirm('Delete this room?')) return;
      try {
        await fetch(`/api/rooms/${e.target.dataset.id}`, {
          method: 'DELETE',
          credentials: 'include'
        });
        loadRooms();
      } catch (err) {
        alert('Delete failed: ' + err.message);
      }
    }

    // New Room button
    newRoomBtn.addEventListener('click', () => {
      isEditing = false;
      editingId = null;
      modalTitle.textContent = 'New Room';
      formError.classList.add('hidden');
      roomForm.reset();
      roomModal.classList.remove('hidden');
    });

    // Close modal
    closeModal.addEventListener('click', () => {
      roomModal.classList.add('hidden');
    });

    // Form submit for create/update
    roomForm.addEventListener('submit', async e => {
      e.preventDefault();
      formError.classList.add('hidden');
      const payload = {
        hotel:  hotelId,
        number: roomNumber.value,
        type:   roomType.value,
        price:  roomPrice.value,
        status: roomStatus.value
      };
      try {
        const url    = isEditing ? `/api/rooms/${editingId}` : '/api/rooms';
        const method = isEditing ? 'PUT' : 'POST';
        const res    = await fetch(url, {
          method,
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify(payload)
        });
        if (!res.ok) throw new Error('Error saving room');
        roomModal.classList.add('hidden');
        loadRooms();
      } catch (err) {
        formError.textContent = err.message || 'Error';
        formError.classList.remove('hidden');
      }
    });

    // Initialize Sortable for drag-and-drop reordering
    new Sortable(roomsTable, {
      handle:    '.drag-handle',
      animation: 150,
      onEnd: async () => {
        const order = Array.from(roomsTable.children).map(tr => tr.dataset.id);
        try {
          const res = await fetch('/api/rooms/reorder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ order })
          });
          if (!res.ok) throw new Error('Reorder failed');
        } catch (err) {
          alert('Failed to save new order: ' + err.message);
        }
      }
    });

    // Initial load
    loadRooms();
  });
</script>
